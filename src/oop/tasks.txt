Создайте класс Shape с абстрактным методом calculateArea(). Создайте классы Circle и Rectangle, которые наследуются от
Shape и реализуют метод calculateArea() для расчета площади круга и прямоугольника соответственно. Создайте экземпляры
классов Circle и Rectangle и выведите их площади.

Создайте интерфейс Playable с методами play() и stop(). Создайте классы MusicPlayer и VideoPlayer, которые реализуют
интерфейс Playable и переопределяют его методы. Создайте экземпляры классов MusicPlayer и VideoPlayer и вызовите их
методы play() и stop().

Создайте класс Employee с приватными свойствами name, salary и методом getSalary(), а также класс Manager, который
наследуется от Employee и имеет дополнительное свойство bonus. Переопределите метод getSalary() в классе

Создайте класс Library, который содержит список книг (Book) и методы для добавления новых книг, поиска книги по
названию и вывода всех книг в библиотеке. Класс Book должен иметь свойства title, author и year.

Создайте класс Bank, который содержит список банковских счетов (BankAccount) и методы для открытия нового счета,
закрытия счета, пополнения и снятия денег со счета, а также вывода общего баланса всех счетов в банке. Класс
BankAccount должен иметь свойства accountNumber, balance и методы для работы со счетом.

Создайте класс Product, который представляет товар и имеет свойства name, price и quantity. Реализуйте методы для
увеличения и уменьшения количества товара, а также для расчета общей стоимости товара (цена * количество). Создайте
класс Cart, который содержит список товаров (Product) и методы для добавления товаров в корзину, удаления товаров из
корзины и расчета общей стоимости товаров в корзине.

Создайте класс Shape, представляющий геометрическую фигуру, с абстрактными методами calculateArea() (расчет площади)
и calculatePerimeter() (расчет периметра). Реализуйте классы Circle, Rectangle и Triangle, которые наследуются от
Shape и реализуют соответствующие методы для расчета площади и периметра.

Создайте класс Employee с свойствами name, position и salary. Создайте класс Company, который содержит список
сотрудников (Employee) и методы для добавления нового сотрудника, удаления сотрудника, вывода списка всех сотрудников
и расчета средней зарплаты. Добавьте методы для повышения зарплаты сотрудникам определенной должности.

Создайте класс Game, представляющий компьютерную игру, с методами start() и stop(). Создайте классы StrategyGame,
RPGGame и SportsGame, которые наследуются от Game и переопределяют его методы. Создайте экземпляры классов и вызовите
их методы start() и stop().

Создайте классы Person, Teacher, Student и Course. Класс Person должен содержать свойства name и `age

.......................................................................................................................

Создайте класс University, который содержит список факультетов (Faculty) и методы для добавления нового факультета,
поиска факультета по имени и вывода всех факультетов в университете. Класс Faculty должен иметь свойства name, dean
и список студентов (Student), а также методы для добавления и удаления студентов.

Создайте класс Flight, представляющий полет, с свойствами departureAirport, arrivalAirport, departureTime и
arrivalTime. Реализуйте методы для расчета длительности полета и вывода информации о полете. Создайте класс
FlightSchedule, который содержит список полетов (Flight) и методы для добавления нового полета, поиска полетов
по аэропорту отправления и аэропорту прибытия, а также вывода расписания полетов.

Создайте класс Bank, представляющий банк, с методами для открытия счета, закрытия счета, перевода денег между
счетами и вывода баланса счета. Реализуйте классы SavingAccount и CheckingAccount, которые наследуются от BankAccount
и имеют дополнительные методы и свойства. Реализуйте также класс BankCustomer, который содержит список счетов
(BankAccount) и методы для управления счетами.

Создайте класс GameCharacter, представляющий персонаж в компьютерной игре, с методами attack(), defend(), useItem().
Реализуйте классы Warrior, Mage и Rogue, которые наследуются от GameCharacter и переопределяют его методы. Создайте
экземпляры классов и вызовите их методы.

Создайте класс OnlineShop, представляющий интернет-магазин, с методами для добавления товара в корзину, оформления
заказа, оплаты заказа и отслеживания статуса заказа. Реализуйте классы Product и Order, которые содержат информацию
о товаре и заказе соответственно. Реализуйте также классы Customer и Payment, которые связаны с заказом и содержат
информацию о покупателе и платеже.

Создайте классы Animal, Cat, Dog и Bird, которые представляют различных животных и реализуют методы makeSound()
для издания звуков. Создайте класс Zoo, который содержит список животных (Animal) и методы для добавления нового жив

Задача: Создание системы банковских счетов
Разработайте классы BankAccount, SavingsAccount и CheckingAccount, которые представляют различные типы банковских
счетов. Учтите следующие требования:
BankAccount должен иметь базовые свойства и методы, такие как номер счета, баланс, методы для внесения и снятия денег
и т.д.
SavingsAccount должен наследовать от BankAccount и добавлять функциональность, связанную с накопительным счетом,
такую как начисление процентов.
CheckingAccount должен наследовать от BankAccount и добавлять функциональность, связанную с текущим счетом, такую как
возможность овердрафта и определенные ограничения на операции.

Задача: Моделирование системы университета
Разработайте классы для моделирования системы университета. Рассмотрите классы Student, Professor, Course и Department.
Учтите следующие требования:
Student должен иметь свойства, связанные с именем, регистрационным номером, курсами, на которые он записан, и т.д.
Professor должен иметь свойства, связанные с именем, ID, преподаваемыми курсами, и т.д.
Course должен иметь свойства, связанные с названием, преподавателем, студентами, и т.д.
Department должен содержать информацию о курсах, студентах и профессорах, принадлежащих к данному отделению.

Задача: Моделирование системы автомобилей
Разработайте классы для моделирования системы автомобилей. Рассмотрите классы Car, ElectricCar, GasolineCar и
HybridCar. Учтите следующие требования:
Car должен иметь базовые свойства и методы, связанные с автомобилем, такие как модель, год выпуска, цвет и т.д.
ElectricCar должен наследовать от Car и добавлять функциональность, связанную с электромобилем, такую как емкость
батареи, время зарядки и т.д.
GasolineCar должен наследовать от Car и добавлять функциональность, связанную с автомобилем, работающим на бензин

Задача: Моделирование геометрических фигур
Разработайте абстрактный класс Shape, который представляет геометрическую фигуру, и интерфейс Resizable, который
определяет методы для изменения размера фигуры. Реализуйте несколько конкретных классов-фигур, таких как Circle,
Rectangle и Triangle, которые наследуются от Shape и реализуют интерфейс Resizable. Каждый класс должен иметь методы
для вычисления площади и периметра фигуры, а классы-наследники должны предоставить реализацию методов изменения размера
в соответствии с правилами для каждой фигуры.

Задача: Реализация почтового сервиса
Создайте интерфейс MailService, который определяет методы для отправки и получения писем. Реализуйте класс Email,
который представляет электронное письмо, и класс MailServer, который реализует интерфейс MailService и предоставляет
функциональность для отправки и получения писем. Класс MailServer должен иметь список зарегистрированных пользователей
и методы для регистрации нового пользователя, отправки письма пользователю и получения новых писем для пользователя.

Задача: Моделирование банковской системы
Создайте абстрактный класс BankAccount, который представляет банковский счет, и интерфейс Transactable, который
определяет методы для выполнения транзакций, таких как внесение и снятие денег. Реализуйте класс SavingsAccount,
который наследуется от BankAccount и реализует интерфейс Transactable, и класс TransactionProcessor, который принимает
объекты Transactable и выполняет транзакции на соответствующих счетах. Класс TransactionProcessor должен иметь методы
для выполнения транзакций и вывода отчета о выполненных операциях.

Задача: Моделирование игры "Битва магов"
Вам необходимо разработать модель игры "Битва магов". В игре участвуют несколько магов, каждый из которых обладает
определенными характеристиками, способностями и оружием. Маги сражаются между собой, используя свои способности и
оружие, чтобы победить противника.

Требования:
Создайте абстрактный класс Wizard, который представляет мага. У него должны быть свойства, такие как имя, уровень,
здоровье и мана.
Создайте интерфейс SpellCaster, который определяет методы для использования заклинаний.
Создайте классы FireMage и IceMage, которые наследуются от Wizard и реализуют интерфейс SpellCaster. Каждый маг должен
иметь свои уникальные способности и заклинания.
Создайте абстрактный класс Weapon, который представляет оружие. У него должны быть свойства, такие как название,
уровень урона и редкость.
Создайте классы Staff, Wand и Sword, которые наследуются от Weapon и представляют различные виды оружия с уникальными
характеристиками.
Реализуйте методы интерфейса SpellCaster в каждом классе мага. Каждый маг должен иметь возможность использовать свои
заклинания и оружие в бою.
Создайте класс Battle, который моделирует битву между двумя магами. Он должен иметь методы для начала битвы,
выполнения ходов магов, определения победителя и вывода результатов битвы.
Реализуйте систему управления игрой, которая позволяет создавать магов, выбирать им оружие, использовать заклинания
и проводить битвы между ними.
В этой задаче вы будете использовать наследование, интерфейсы, абстрактные классы, полиморфизм и инкапсуляцию для
построения модели игры "Битва магов". Вы должны обратить внимание на проектирование классов, чтобы обеспечить
гибкость и расширяемость системы.